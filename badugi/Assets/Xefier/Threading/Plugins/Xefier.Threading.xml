<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xefier.Threading</name>
    </assembly>
    <members>
        <member name="T:System.Threading.Tasks.ITask">
            <summary>
            Represents an asynchronous operation.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.ITask.Exception">
            <summary>
            Gets the Exception that caused the Task to end prematurely. If the Task completed successfully or has not yet thrown any exceptions, this will return null.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.ITask.IsCanceled">
            <summary>
            Gets whether this Task instance has completed execution due to being canceled.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.ITask.IsFaulted">
            <summary>
            Gets whether the Task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.ITask.IsCompleted">
            <summary>
            Gets whether this Task has completed.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.ITask.Status">
            <summary>
            Gets the TaskStatus of this task.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.ITask.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.ITask.ContinueWith(System.Action{System.Threading.Tasks.ITask})">
            <summary>
            Creates a continuation that executes asynchronously when the target Task completes.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:System.Threading.Tasks.ITask.Start">
            <summary>
            Starts the Task, scheduling it for execution
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.ITask.Wait">
            <summary>
            Waits for the Task to complete execution.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.ITask`1">
            <summary>
            Represents an asynchronous operation that can return a value.
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:System.Threading.Tasks.ITask`1.Result">
            <summary>
            Gets the result value of this Task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.ITask`1.ContinueWith(System.Action{System.Threading.Tasks.ITask{`0}})">
            <summary>
            Creates a continuation that executes asynchronously when the target task completes. 
            </summary>
            <param name="continuationAction">An action to run when the antecedent Task_TResult completes. When run, the delegate will be passed the completed task as an argument.</param>
            <returns></returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskBase">
            <summary>
            Represents an asynchronous operation. (Abstract)
            </summary>
        </member>
        <member name="E:System.Threading.Tasks.TaskBase.Finished">
            <summary>
            Event that triggers when this task is finished
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskBase.TaskAction">
            <summary>
            Action for this task to complete
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskBase.Exception">
            <summary>
            Gets the Exception that caused the Task to end prematurely. If the Task completed successfully or has not yet thrown any exceptions, this will return null.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskBase.IsCanceled">
            <summary>
            Gets whether this Task instance has completed execution due to being canceled.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskBase.IsFaulted">
            <summary>
            Gets whether the Task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskBase.IsCompleted">
            <summary>
            Gets whether this Task has completed.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskBase.Status">
            <summary>
            Gets the TaskStatus of this task.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskBase.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskBase.#ctor(System.Action)">
            <summary>
            Initializes a new Task with the specified action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:System.Threading.Tasks.TaskBase.#ctor">
            <summary>
            WARNING: For internal use only
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskBase.Init(System.Action)">
            <summary>
            WARNING: For internal use only
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:System.Threading.Tasks.TaskBase.Start">
            <summary>
            Starts the Task now
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskBase.ContinueWith(System.Action{System.Threading.Tasks.ITask})">
            <summary>
            Creates a continuation that executes asynchronously when the target Task completes.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:System.Threading.Tasks.TaskBase.Wait">
            <summary>
            Waits for the Task to complete execution.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskBase.OnFinished">
            <summary>
            Triggers Finished event
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskStatus">
            <summary>
            Represents the current stage in the lifecycle of a Task.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
            <summary>
            The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken while the token was in signaled state, or the task's CancellationToken was already signaled before the task started executing. For more information, see Task Cancellation.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Created">
            <summary>
            The task has been initialized but has not yet been scheduled.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
            <summary>
            The task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
            <summary>
            The task completed execution successfully.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Running">
            <summary>
            The task is running but has not yet completed.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
            <summary>
            The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
            <summary>
            The task has finished executing and is implicitly waiting for attached child tasks to complete.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
            <summary>
            The task has been scheduled for execution but has not yet begun executing.
            </summary>
        </member>
    </members>
</doc>
